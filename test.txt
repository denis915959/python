# python test.txt

import sqlite3

"""class Test:
	def __init__(self):
		self.N_sizes = [3, 2, 4, 2]
		self.mode = 2
		self.N_size=sum(self.N_sizes) + len(self.N_sizes) - 1
	def get_crossroad(self, mesh):  # расчет номера перекрестка по номеру ячейки
		N_size_small=sum(self.N_sizes)	
		Sum=0
		sz=len(self.N_sizes)
		block_mesh=0
		mesh_tmp=mesh%N_size_small
		for i in range(0, sz):
			Sum=Sum+self.N_sizes[i]
			if(mesh_tmp<Sum):
				block_mesh=i
				break
		cross_row=0 #нумерация с нуля
		if(self.mode==2):
			cross_row=int(mesh/(2*sum(self.N_sizes)))
			return(cross_row*self.N_size+mesh_tmp+block_mesh+1)
		if(self.mode==1):
			cross_row=int(mesh/(2*sum(self.N_sizes))) #нумерация с нуля!
			print(cross_row)
			return(cross_row*self.N_size+mesh_tmp+block_mesh+2)

test = Test()
print(test.get_crossroad(4))"""


class Artikul:
	def __init__(self, name_base):
		self.conn = sqlite3.connect(str(name_base)) # Создание подключения к базе данных SQLite
		self.cursor = self.conn.cursor() # Создание курсора для выполнения SQL-запросов
		self.cursor.execute("CREATE TABLE IF NOT EXISTS articuls(number INT, articul TEXT, mesh INT, floor INT)")
		self.cursor.execute("SELECT COUNT(*) FROM articuls")
		res = self.cursor.fetchone()
		self.articul_counter=res[0] #считывается из базы данных!

	def get_artikul_counter(self): #скорее всего, при неудачном get уменьшится!
		return(self.articul_counter)

	def delete_artikul(self, articul): # удалаяет элемент таблицы по артикулу
		articul_str=str(articul)
		self.cursor.execute("DELETE FROM articuls WHERE articul = '{}'".format(articul_str))
		self.conn.commit()
		if(self.articul_counter>0):
			self.articul_counter = self.articul_counter - 1
		return(bool(self.cursor.rowcount))	

	def delete_mesh(self, mesh_num): # удалаяет элемент таблицы по номеру ячейки
		self.cursor.execute("DELETE FROM articuls WHERE mesh = '{}'".format(mesh_num))
		self.conn.commit()
		if(self.articul_counter>0):
			self.articul_counter = self.articul_counter - 1
		return(bool(self.cursor.rowcount))

	def insert_artikul(self, articul1, mesh, floor): # вставка данных в таблицу
		articul=str(articul1)
		self.cursor.execute("INSERT INTO articuls (number, articul, mesh, floor) VALUES (?, ?, ?, ?)", (self.articul_counter, articul, mesh, floor))
		self.conn.commit()
		self.articul_counter = self.articul_counter + 1

	def clean_table(self): # очистка таблицы
		self.cursor.execute("DELETE FROM {}".format("articuls")) 
		self.conn.commit()
		self.articul_counter = 0

	def get_artikul(self, mesh_num, floor_num): # возвращает артикул по номеру ячейки   # ВНЕСТИ В ТЕТРАДЬ:  WHERE mesh='{}' - только так! Т.е столбец mesh указываем как столбец, иначе же mesh будет пониматься питоном как значение!
		tmp = self.cursor.execute("SELECT articul FROM articuls WHERE mesh='{}' AND floor ='{}'".format(int(mesh_num), int(floor_num))).fetchall()
		sz=len(tmp)
		i=3
		tmp=str(tmp)
		res=""
		while((i<len(tmp)) and (tmp[i]!="'")): #обрезаем лишние кавычки и скобки
			res=res+tmp[i]
			i=i+1
		return(res)

	def get_mesh(self, articul): # возвращает номер ячейки по артикулу
		articul_str=str(articul)
		tmp = self.cursor.execute("SELECT mesh FROM articuls WHERE articul='{}'".format(articul_str)).fetchall()
		sz=len(tmp)
		i=2
		tmp=str(tmp)
		res=""
		while((i<len(tmp)) and (tmp[i]!=",")): #обрезаем лишние кавычки и скобки
			res=res+tmp[i]
			i=i+1
		return(res)

	def get_floor(self, articul): # возвращает номер яруса по артикулу
		articul_str=str(articul)
		tmp = self.cursor.execute("SELECT floor FROM articuls WHERE articul='{}'".format(articul_str)).fetchall()
		sz=len(tmp)
		i=2
		tmp=str(tmp)
		res=""
		while((i<len(tmp)) and (tmp[i]!=",")): #обрезаем лишние кавычки и скобки
			res=res+tmp[i]
			i=i+1
		return(res)

	def get_mesh_by_number(self, number): # возвращает объект класса mesh по номеру
		tmp = self.cursor.execute("SELECT mesh FROM articuls WHERE number={}".format(number)).fetchall()
		sz=len(tmp)
		i=2
		tmp=str(tmp)
		mesh=""
		while((i<len(tmp)) and (tmp[i]!=",")): #обрезаем лишние кавычки и скобки
			mesh=mesh+tmp[i]
			i=i+1
		tmp = self.cursor.execute("SELECT articul FROM articuls WHERE number={}".format(number)).fetchall()
		sz=len(tmp)
		i=3
		tmp=str(tmp)
		art=""
		while((i<len(tmp)) and (tmp[i]!="'")): #обрезаем лишние кавычки и скобки
			art=art+tmp[i]
			i=i+1
		return(Mesh(int(mesh), art))
	
	def check_mesh(self, mesh, floor): # проверяет занятость ячейки на складе!
		tmp = self.cursor.execute("SELECT articul FROM articuls WHERE mesh='{}' AND floor = '{}'".format(int(mesh), int(floor))).fetchall()
		if (len(tmp)==0):
			return(False)
		else:
			return(True)

	def check_artikul(self, artikul):
		tmp = self.cursor.execute("SELECT mesh FROM articuls WHERE articul='{}'".format(str(artikul))).fetchall()
		if (len(tmp)==0):
			return(False)
		else:
			return(True)

	def close(self):
		self.conn.close()


config = Artikul("test.db")

config.insert_artikul("d1", 2, 2)
config.insert_artikul("d2", 2, 2)
config.insert_artikul("d3", 2, 2)

config.delete_artikul("d1")
print(config.check_artikul("d2"))


config.clean_table()
print(config.check_artikul("d2"))



