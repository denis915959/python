# python lab2_1.txt

from sklearn.cluster import KMeans, DBSCAN, Birch #,  MeanShift
#import HDBSCAN
from sklearn import metrics
from torchvision import datasets, transforms
from sklearn.cluster import AffinityPropagation
import torch
import torch.utils.data as data_utils
import numpy as np

from torchvision.datasets import MNIST

#загрузить набор данных MNIST
transform = transforms.Compose([
transforms.ToTensor(),
transforms.Normalize((0.1307,), (0.3081,))  #уменьшает влияние масштаба
])

train_set = MNIST(root='./data', train=True, download=True, transform=transform) #датасет, на котором "тренируем" нейронку
test_set = MNIST(root='./data', train=False, download=True, transform=transform) #на этом датасете проверям, насколько хорошо обучили нейронку (через расчет ARI)

train_data = train_set.data.reshape((-1, 28 * 28)) #делаем картинки одного размера
test_data = test_set.data.reshape((-1, 28 * 28))

train_data = train_data.float() / 255.0   #алгоритм так быстрее работает
test_data = test_data.float() / 255.0








"""sample_indices = np.random.choice(len(test_data), size=1000, replace=False)
sample_data = test_data[sample_indices]
sample_labels = torch.tensor(kmeans.predict(sample_data))"""






""" #работает
#использовать алгоритм KMeans для кластеризации данных из train_data
kmeans = KMeans(n_clusters=10).fit(train_data)

#Получение прогнозируемых меток
kmeans_predicate_labels = kmeans.predict(test_data) 

#Рассчитываем скорректированный индекс RAND между прогнозируемыми метками и истинными метками
true_labels = test_set.targets
kmeans_ari = metrics.adjusted_rand_score(true_labels, kmeans_predicate_labels)

#Распечатайте скорректированный индекс RAND и центры кластеров
print("kmeans Adjusted Rand Index:", kmeans_ari)
"""



"""  #не работает этот блок
#использовать алгоритм sklearn.cluster.AffinityPropagation для кластеризации данных
#af = AffinityPropagation(preference=-50) #, affinity='euclidean')
#af.fit(all_images)  # fit - Обучаем модель на данных
af = AffinityPropagation(preference=-50, damping=0.5).fit(train_data)

# прогнозируемых меток и кластерных центров
af_predicated_labels = af.predict(test_data) 
af_cluster_centers = af.cluster_centers_

#Рассчитываем скорректированный индекс RAND между прогнозируемыми метками и истинными метками
true_labels = test_set.targets
af_ari = metrics.adjusted_rand_score(true_labels, af_predicated_labels)

#Распечатайте скорректированный индекс RAND и центры кластеров
print("AF  Adjusted Rand Index:", af_ari)
print("Cluster Centers:", af_cluster_centers)
"""


#работает
dbscan = DBSCAN(eps=2.0, min_samples=2) #через чат подобрать оптимальные параметры утром
dbscan.fit(train_data)
dbscan_predicated_labels = dbscan.fit_predict(test_data) 
#dbscan_cluster_centers = dbscan.cluster_centers_
true_labels = test_set.targets
dbscan_ari = metrics.adjusted_rand_score(true_labels, dbscan_predicated_labels)
print("DBSCAN  Adjusted Rand Index:",dbscan_ari)


#не работает
"""af = AffinityPropagation().fit(train_data)#preference=-50, damping=0.5).fit(train_data)
af_predicated_labels = af.predict(test_data) 
true_labels = test_set.targets
af_ari = metrics.adjusted_rand_score(true_labels, af_predicated_labels)
print("AF  Adjusted Rand Index:",af_ari)"""


#работает
"""birch = Birch(n_clusters=None).fit(train_data)#preference=-50, damping=0.5).fit(train_data)   #через чат подобрать оптимальные параметры утром
birch_predicated_labels = birch.predict(test_data) 
true_labels = test_set.targets
birch_ari = metrics.adjusted_rand_score(true_labels, birch_predicated_labels)
print("Birch  Adjusted Rand Index:",birch_ari)"""


#после чата сделать вывод и попробовать на экран таки вывести




