# python heuristic.txt
import copy
import time
import sys

class Mesh:
	def __init__(self, m_number):
		self.number=m_number 

class Branch:
	def __init__(self, adjacted_node1, cost1):
		self.adjacted_node=adjacted_node1
		self.cost=cost1

class Node:
	def __init__(self, num, branch_arr, flag1):
		self.number=num
		self.branch_array=branch_arr
		self.railroad=flag1 #True - Перекресток, нет - рядом с ячейками находится
		self.traveled_path=0
		self.previous_node=-1

class robot_path_node:
	def __init__(self, action1, counter1):
		self.action=action1
		self.counter=counter1


global orientation
orientation=3

def generate_graf(N_sizes, M, cost_between_blocks, cost_between_rows, cost_between_mesh, number_to_zero_node, mode):  #генерация графа, работает 
	Nodes=[]
	sz=len(N_sizes)
	count=0
	if(mode==1):  #число перекрестков в ряде стеллажей
		N_size=sum(N_sizes)+len(N_sizes) + 1 #число перекрестков в ряде стеллажей
		b=[]
		b.append(Branch(number_to_zero_node, cost_between_rows))
		Nodes.append(Node(count, b, True))

		for i in range(0, int(M/2)):
			#формируем левую магистраль!
			if(i==0):
				count=count+1
				branchs=[]
				if(i==(int(M/2)-1)):
					branchs=[Branch(count+1, cost_between_blocks)]
				else:
					branchs=[Branch(count+1, cost_between_blocks), Branch(count+N_size, cost_between_rows)]
				Nodes.append(Node(count, branchs, True))
			else:
				count=count+1
				branchs=[]
				if(i==(int(M/2)-1)):
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-N_size, cost_between_rows)]
				else:
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-N_size, cost_between_rows), Branch(count+N_size, cost_between_rows)]
				Nodes.append(Node(count, branchs, True))

			#формируем перекрестки в самом первом блоке.
			if(N_sizes[0]==1): #блок из одной ячейки!
				count=count+1
				branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks)] #добавлено
				Nodes.append(Node(count, branchs, False))
			else:
				for j in range(0, N_sizes[0]):
					count=count+1
					branchs=[]
					if(j==0): # первый перекресток в блоке
						branchs=[Branch(count+1, cost_between_mesh), Branch(count-1, cost_between_blocks)] #добавлено
					if(j==(N_sizes[0]-1)): # последний перекресток в блоке
						branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_blocks)]
					if((j!=(N_sizes[0]-1))and(j!=0)): # обычный перекресток в середине
						branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_mesh)]
					Nodes.append(Node(count, branchs, False))
			
			for k in range(1, sz): #идем по блокам
				#создаем перекресток на главной диагонали
				count=count+1
				flag=False
				if((i==0)and(int(M/2)==1)): #т.е если это испытательный стенд
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks)]
					flag=True
				if((i==0)and(int(M/2)>1)): #т.е если это НЕ испытательный стенд, первый ряд
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks), Branch(count+N_size, cost_between_rows)]
					flag=True
				if((i!=0)and(i==(int(M/2)-1))): #последний ряд
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks), Branch(count-N_size, cost_between_rows)]
					flag=True
				if(flag==False): #т.е это обычный перекресток в середине склада
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks), Branch(count-N_size, cost_between_rows), Branch(count+N_size, cost_between_rows)]
				Nodes.append(Node(count, branchs, True))

				# создаем сам блок
				for j in range(0, N_sizes[k]):
					count=count+1
					branchs=[]
					if(N_sizes[k]==1): #блок из одной ячейки!
						if(k==(sz-1)): # крайний правый блок!
							branchs=[Branch(count-1, cost_between_blocks), Branch(count+1, cost_between_blocks)]
						else:
							branchs=[Branch(count-1, cost_between_blocks), Branch(count+1, cost_between_blocks)]
					
					else: 
						flag = False
						if(j==0): # первый перекресток в блоке
							branchs=[Branch(count+1, cost_between_mesh), Branch(count-1, cost_between_blocks)] #эта строка отличается от аналогичной при построении крайнего левого блока
							flag = True
						if((j==(N_sizes[k]-1))and(j!=0)and(k==(sz-1))): # крайний перекресток справа
							branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_blocks)] #добавлено
							flag = True
						elif((j==(N_sizes[k]-1))and(j!=0)): #крайний перекресток в блоке, но не крайнем блоке!
							branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_blocks)]
							flag = True 
						if(flag==False):    #((j!=(N_sizes[0]-1))and(j!=0)): #обычный перекресток внутри блока
							branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_mesh)]
						#if((N_sizes[k]==1)and(k==(sz-1))):

					Nodes.append(Node(count, branchs, False))

			#формируем правую магистраль!
			if(i==0):
				count=count+1
				branchs=[]
				if(i==(int(M/2)-1)):
					branchs=[Branch(count-1, cost_between_blocks)]
				else:
					branchs=[Branch(count-1, cost_between_blocks), Branch(count+N_size, cost_between_rows)]
				Nodes.append(Node(count, branchs, True))
			else:
				count=count+1
				branchs=[]
				if(i==(int(M/2)-1)):
					branchs=[Branch(count-1, cost_between_blocks), Branch(count-N_size, cost_between_rows)]
				else:
					branchs=[Branch(count-1, cost_between_blocks), Branch(count-N_size, cost_between_rows), Branch(count+N_size, cost_between_rows)]
				Nodes.append(Node(count, branchs, True))

		Nodes[number_to_zero_node].branch_array.append(Branch(0, cost_between_rows))


	if (mode==2):
		N_size=sum(N_sizes)+len(N_sizes)-1 #число перекрестков в ряде стеллажей
		b=[]
		b.append(Branch(number_to_zero_node, cost_between_rows))
		Nodes.append(Node(count, b, True))

		for i in range(0, int(M/2)):
			#формируем перекрестки в самом первом блоке.
			if(N_sizes[0]==1):
				count=count+1
				branchs=[Branch(count+1, cost_between_blocks)]
				Nodes.append(Node(count, branchs, False))
			else:
				for j in range(0, N_sizes[0]):
					count=count+1
					branchs=[]
					if(j==0): # первый перекресток в блоке
						branchs=[Branch(count+1, cost_between_mesh)]
					if(j==(N_sizes[0]-1)): # последний перекресток в блоке
						branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_blocks)]
					if((j!=(N_sizes[0]-1))and(j!=0)):
						branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_mesh)]
					Nodes.append(Node(count, branchs, False))
			
			for k in range(1, sz): #идем по блокам
				#создаем перекресток на главной диагонали
				count=count+1
				flag=False
				if((i==0)and(int(M/2)==1)): #т.е если это испытательный стенд
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks)]
					flag=True
				if((i==0)and(int(M/2)>1)): #т.е если это НЕ испытательный стенд, первый ряд
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks), Branch(count+N_size, cost_between_rows)]
					flag=True
				if((i!=0)and(i==(int(M/2)-1))): #последний ряд
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks), Branch(count-N_size, cost_between_rows)]
					flag=True
				if(flag==False): #т.е это обычный перекресток в середине склада
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks), Branch(count-N_size, cost_between_rows), Branch(count+N_size, cost_between_rows)]
				Nodes.append(Node(count, branchs, True))

				# создаем сам блок
				for j in range(0, N_sizes[k]):
					count=count+1
					branchs=[]
					if(N_sizes[k]==1):
						if(k==(sz-1)): 
							branchs=[Branch(count-1, cost_between_blocks)]
						else:
							branchs=[Branch(count-1, cost_between_blocks), Branch(count+1, cost_between_blocks)]
					
					else: 
						flag = False
						if(j==0): # первый перекресток в блоке
							branchs=[Branch(count+1, cost_between_mesh), Branch(count-1, cost_between_blocks)] #эта строка отличается от аналогичной при построении крайнего левого блока
							flag = True
						if((j==(N_sizes[k]-1))and(j!=0)and(k==(sz-1))): # крайний перекресток справа
							branchs=[Branch(count-1, cost_between_mesh)] #, Branch(count+1, cost_between_blocks)]
							flag = True
						elif((j==(N_sizes[k]-1))and(j!=0)): #крайний перекресток в блоке, но не крайнем блоке!
							branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_blocks)]
							flag = True 
						if(flag==False):    #((j!=(N_sizes[0]-1))and(j!=0)): #обычный перекресток внутри блока
							branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_mesh)]
						#if((N_sizes[k]==1)and(k==(sz-1))):

					Nodes.append(Node(count, branchs, False))

		Nodes[number_to_zero_node].branch_array.append(Branch(0, cost_between_rows))
	return(Nodes)



def get_crossroad(node, N_sizes, N_size_big, mode):  #работает!!!
	N_size=sum(N_sizes)
	
	Sum=0
	sz=len(N_sizes)
	block_node=0
	node_tmp=node%N_size

	for i in range(0, sz): #это не меняем
		Sum=Sum+N_sizes[i]
		if(node_tmp<Sum): #<=
			block_node=i
			break
	
	cross_row=0 #нумерация с нуля
	if(mode==2):
		cross_row=int(node/(2*N_size))
		return(cross_row*N_size_big+node_tmp+block_node+1)

	if(mode==1):
		if(int((node/N_size)%2)==0):
			cross_row=int(node/(2*N_size))
		if(int((node/N_size)%2)==1):
			cross_row=int(node/(2*N_size))+1  #номер горизонтальной магистрали
		return(cross_row*N_size_big+(node_tmp+2)+block_node)



# функция выбора следующей вершины на основании расчета эвристики
def choose_node(reachable, goal_node, cost_between_blocks, cost_between_rows, cost_between_mesh, N_sizes, N_size, mode, number_to_zero_node): #goal_node это объект класса Node
	sz_reachable=len(reachable)
	H=[]
	if (mode == 1):
		for k in range(0, sz_reachable):  #расчет эвристики в цикле между goal_node и всемы элементами массива reachable
			node1_abs=reachable[k]   #первоначальное значение
			node2_abs=goal_node      #первоначальное значение

			heuristic=0
			node1 = node1_abs.number
			node2 = node2_abs.number

			if(node2==node1):
				heuristic = 0
				H.append(heuristic+reachable[k].traveled_path)
				continue
			if(node1==0):
				node1 = number_to_zero_node
				heuristic = heuristic + cost_between_rows
			else:
				node1=(node1_abs.number-1)%N_size+1

			if(node2==0):
				heuristic = 0
				H.append(heuristic+reachable[k].traveled_path)
				continue
			else:
				node2=(node2_abs.number-1)%N_size+1
	
			if ((node1_abs.number%N_size)>(node2_abs.number%N_size)):  #node1 левее node2 всегда!!!
				tmp=node1_abs
				node1_abs=node2_abs
				node2_abs=tmp
			if (node1>node2):  #node1 левее node2 всегда!!!
				tmp=node1
				node1=node2
				node2=tmp

			sz=len(N_sizes)
			Sum=1 
			for i in range(0, sz): #не N_size!!
				if(node1==Sum):
					flag1=True
					block_node1=i
					break
				Sum=Sum+N_sizes[i]+1
				if(node1<Sum): #<=
					block_node1=i
					break
			if((node1==1)and(node2!=N_size)):
				block_node1=-1 
				flag1=True
			if (node1==N_size):
				block_node1=sz
				flag1=True
			Sum=1
		
			for i in range(0, sz):
				if(node2==Sum):
					flag2=True
					block_node2=i
					break
				Sum=Sum+N_sizes[i] + 1
				if(node2<Sum):
					block_node2=i
					break
			if(node2==1):  #для n2 это не актуально, так как node2>=node1
				block_node2=-1  #т.е =-1
				flag2=True
			if (node2==N_size):
				block_node2=sz
				flag2=True
			if((node1==1)and(node2==N_size)):
				block_node1=-1

			if((block_node1==block_node2)and(block_node1!=sz)and(block_node1!=-1)and(node1_abs.railroad!=True)and(node2_abs.railroad!=True)):  # вместо 3 нужен len(N_sizes)?
				Sum=-1
				if(block_node1==0):
					Sum=2
				else:
					Sum=2 # 1
					for j in range(0, block_node1):
						Sum=Sum+N_sizes[j]+1
				h1=node1-Sum
				h2=node2-Sum
				S1=h1+h2

				Sum=-1
				if(block_node1==0):
					Sum=2
				else:
					Sum=0 # 1
					for j in range(0, (block_node1+1)):
						Sum=Sum+N_sizes[j]+1
				h1=abs(node1-Sum)
				h2=abs(node2-Sum)

				S2=h1+h2
				if(S1>S2):
					cross_count=S2
				else:
					cross_count=S1	
				heuristic =heuristic + cross_count*cost_between_mesh    # heuristic=(Min-2)*cost_between_mesh+2*cost_between_blocks
				if ((node1_abs.number//N_size)!=(node2_abs.number//N_size)): #важно, чтобы перекрестки были в одно блоке!
					heuristic=heuristic+2*cost_between_blocks
			else:
				for j in range(node1, node2):
					if ((Nodes[j].railroad==True)or(Nodes[j+1].railroad==True)):  #-1
						heuristic = heuristic + cost_between_blocks
					if ((Nodes[j].railroad==False) and (Nodes[j+1].railroad==False)):  #-1
						heuristic = heuristic + cost_between_mesh
	
			row_node1=int((node1_abs.number-1)/N_size)
			row_node2=int((node2_abs.number-1)/N_size)
			row_difference=abs(row_node2-row_node1) 
			heuristic=heuristic+row_difference*cost_between_rows  #вернуть!	
			H.append(heuristic+reachable[k].traveled_path)

	if (mode == 2):
		for k in range(0, sz_reachable):  #расчет эвристики в цикле между goal_node и всемы элементами массива reachable
			node1_abs=reachable[k]  #первоначальное значение
			node2_abs=goal_node     #первоначальное значение
		
			heuristic=0
			node1 = node1_abs.number
			node2 = node2_abs.number
			if(node2==node1):
				heuristic = 0
				H.append(heuristic+reachable[k].traveled_path)
				continue			

			if(node1==0):
				node1 = number_to_zero_node
				heuristic = heuristic + cost_between_rows
			else:
				node1=(node1_abs.number-1)%N_size+1

			if(node2==0):
				heuristic = 0
				H.append(heuristic+reachable[k].traveled_path)
				continue
			else:
				node2=(node2_abs.number-1)%N_size+1

			if ((node1_abs.number%N_size)>(node2_abs.number%N_size)):  #node1 левее node2 всегда!!!
				tmp=node1_abs
				node1_abs=node2_abs
				node2_abs=tmp
			if (node1>node2):  #node1 левее node2 всегда!!!
				tmp=node1
				node1=node2
				node2=tmp

			sz=len(N_sizes)
			#ищем номер блока ячеек, в котором находится первая вершина
			Sum=0
			block_node1=-2
			for i in range(0, sz): #не N_size!!
				if(node1==Sum):
					flag1=True
					block_node1=i
					break
				Sum=Sum+N_sizes[i]+1
				if(node1<Sum): #<=
					block_node1=i
					break
			Sum=0
			block_node2=-2
			for i in range(0, sz):
				if(node2==Sum):
					flag2=True
					block_node2=i
					break
				Sum=Sum+N_sizes[i] + 1
				if(node2<Sum):
					block_node2=i
					break

			if((block_node1==block_node2)and(node1_abs.railroad!=True)and(node2_abs.railroad!=True)): #т.е перекрестки в одном блоке находятся, ни один из них не на главной магистрпали!
				cross_count=-2
				if(block_node1==0): #переписано по новой, работает на всех типах складов!
					Sum=N_sizes[0]
					h1=Sum - node1  #расчет номера перекрестки в блоке, содержащем этот перекресток
					h2=Sum - node2
					cross_count=h1+h2 #это костыль, чтобы не делать еще одну проверку при расчете эвристики, так как первому блоку не принадлежит ни один перекресток!
					heuristic=cross_count*cost_between_mesh	
				if(block_node1==(sz-1)): #переписано по новой, работает на всех типах складов!
					Sum=1
					for j in range(0, block_node1): #здесь выход за диапазон!
						Sum=Sum+N_sizes[j]+1
					h1=abs(node1-Sum)
					h2=abs(node2-Sum)
					cross_count=h1+h2
					heuristic=cross_count*cost_between_mesh
				if((block_node1!=(sz-1))and(block_node1!=0)): 
					Sum=1
					for j in range(0, block_node1):
						Sum=Sum+N_sizes[j]+1
					h1=node1-Sum   #расчет номера перекрестки в блоке, содержащем этот перекресток
					h2=node2-Sum
					S1=h1+h2

					Sum=N_sizes[0]
					for j in range(1, (block_node1+1)): #здесь надо исправить!
						Sum=Sum+N_sizes[j]+1
					h1=abs(node1-Sum)
					h2=abs(node2-Sum)
					S2=h1+h2
					if(S1>S2):
						cross_count=S2
					else:
						cross_count=S1	
					heuristic=cross_count*cost_between_mesh  # +2*cost_between_blocks
				if ((node1_abs.number//N_size)!=(node2_abs.number//N_size)): #важно, чтобы перекрестки были в одно блоке!
					heuristic=heuristic+2*cost_between_blocks
			else:
				for j in range(node1, node2):
					if ((Nodes[j].railroad==True)or(Nodes[j+1].railroad==True)):  #-1
						heuristic = heuristic + cost_between_blocks
					if ((Nodes[j].railroad==False) and (Nodes[j+1].railroad==False)):  #-1
						heuristic = heuristic + cost_between_mesh

			row_node1=int((node1_abs.number-1)/N_size)
			row_node2=int((node2_abs.number-1)/N_size)
			row_difference=abs(row_node2-row_node1) 
			heuristic=heuristic+row_difference*cost_between_rows  #вернуть!
			H.append(heuristic+reachable[k].traveled_path)

	min=int(1000000*cost_between_mesh)
	for i in range(0, sz_reachable):
		if(H[i]<min):
			min=H[i]
	num=0
	for i in range(0, sz_reachable):
		if(H[i]==min):
			num=i
	#print("heuristic = ", heuristic)
	return(reachable[num])



def check_node_on_reachable(reachable, node): #True - входит, False - не входит
	sz=len(reachable)
	flag=False
	for i in range(0, sz):
		if(reachable[i].number==node.number):
			flag=True
			break
	return(flag)


# для A-star
def make_path(Nodes, goal_node): #тут виснет при стартовой вершине не 0
	path=[]
	node=Nodes[goal_node.number]
	#print("A star")
	while (node.previous_node!=-1):
		path.append(node)
		node=Nodes[node.previous_node]
	path.append(node) #добавляем в маршрут стартовую вершину
	path.reverse()
	return(path)
	



def A_star(Nodes, start_node, goal_node, cost_between_blocks, cost_between_rows, cost_between_mesh, N_sizes, N_size, mode, number_to_zero_node):   #goal_node это объект класса Node
	reachable=[]
	explored=[]
	k=0
	reverse=False
	if(start_node.number==goal_node.number):
		path=[]
		path.append(Nodes[start_node.number])
		path.append(Nodes[goal_node.number])
		return(path)

	else:
		if(start_node.number>goal_node.number):
			tmp=start_node
			start_node=goal_node
			goal_node=tmp
			reverse=True

		if(start_node.number==0): # проблема где-то тут!
			node=Nodes[Nodes[0].branch_array[0].adjacted_node]
			Nodes[Nodes[0].branch_array[0].adjacted_node].previous_node=0 #на нулевую вершину указывает, но почему-то не работает
			sz=len(node.branch_array)
			for i in range(0, sz):
				reachable.append(Nodes[node.branch_array[i].adjacted_node])
			explored.append(Nodes[0])
			k=0
	
		if(start_node.number!=0): #тут возможно тоже что-то с нулевой вершиной сделать?
			sz=len(start_node.branch_array)
			for i in range(0, sz):
				reachable.append(Nodes[start_node.branch_array[i].adjacted_node])
			explored.append(Nodes[start_node.number])
			k=1
	
		while(len(reachable)>0): # сделать одну функцию choose_mode!
			node=Nodes[choose_node(reachable, goal_node, cost_between_blocks, cost_between_rows, cost_between_mesh, N_sizes, N_size, mode, number_to_zero_node).number]
			if(k==1):
				Nodes[node.number].previous_node=Nodes[start_node.number].number
				k=2

			if(node.number==goal_node.number):  
				if ((start_node.number == 0)and(goal_node.number == number_to_zero_node)):  # это костыль, это нужно, чтобы путь от 0-го до первого перекрестка на главной магистрали верно считался
					path = [Nodes[0], Nodes[number_to_zero_node]]
					if(reverse==True):
						path.reverse()
					return(path)

				path=make_path(Nodes, goal_node)
				if(start_node.number==0):
					path.insert(0, Nodes[Nodes[0].branch_array[0].adjacted_node])
					path.insert(0, Nodes[0])

				if(reverse==True):
					path.reverse()
				return(path)

			reachable.remove(node)
			explored.append(node)

			adjacent_nodes=[]
			new_reachable_nodes=[] #этот массив не обновляется

			sz_adj_node=len(node.branch_array)
		
			for i in range(0, sz_adj_node):
				adjacent_nodes.append(Nodes[node.branch_array[i].adjacted_node])

			sz_explored=len(explored) #вот это переписать надо
			new_reachable_nodes=adjacent_nodes
			for i in range(0, sz_explored):
				for j in range(0, len(new_reachable_nodes)):  #sz_adj_node):
					if(new_reachable_nodes[j].number==explored[i].number): #reachable
						new_reachable_nodes.remove(explored[i]) #reachable
						break 

			sz_adj_node=len(new_reachable_nodes)
			for i in range(0, sz_adj_node): #проверить этот блок, удалить break, написать make_path, протестировать алгоритм
				if(check_node_on_reachable(reachable, new_reachable_nodes[i])==False): #т.е не знаем, как попасть в эту вершину 
					Nodes[new_reachable_nodes[i].number].previous_node=node.number
					reachable.append(Nodes[new_reachable_nodes[i].number])
			k=2	



def make_robot_action(path, N_mesh_size, N_size, floor, start_mesh, goal_mesh, mode, to_end): #, orientation    этаж конечной вершины , action=0 на последнем участке, counter =числу пройденных перекрестков, далее робот упирается в приемный терминал, но так как перекрестки пройдены, то получаем success
	sz=len(path)
	#если направление стартовое не совпадает с тем, которое нужно, то сделать доворот !!!! т.е 3 проверки добавить. после этого скопировать старый код построения склада и посмотреть корректность работы
	robot_path=[]
	global orientation
	udalennost=int(goal_mesh//N_mesh_size)%2

	if(path[0].number==0):#костыль, если стартовая вершина 
		robot_path.append(robot_path_node(0, 1))

	if(path[0].number==path[1].number):
		if ((start_mesh>=0)and(goal_mesh>=0)): #т.е обе вершины не отрицательны (т.е стартовая и конечная точка - это именно ячейки, а не просто перекрестки)
			action=-1
			if (start_mesh==goal_mesh):
				if(floor==1):
					action=9
				if(floor==2):
					action=10
			
			else:
				orientation=(orientation+2)%4
				if(floor==1):
					action=11
				if(floor==2):
					action=12
			robot_path.append(robot_path_node(action, 0))

	else:
		for i in range(0, (sz-1)):
			dx=path[i+1].number-path[i].number
			if(abs(dx)==N_size): #если робот едет по главной магистрали
				if(dx>0):
					if(orientation==2):
						action=6
						counter=0 #1
						robot_path.append(robot_path_node(action, counter))
					if(orientation==3):
						action=18
						counter=0 #1
						robot_path.append(robot_path_node(action, counter))
					if(orientation==4):
						action=5
						counter=0 #1
						robot_path.append(robot_path_node(action, counter))
					action=0
					counter=1
					robot_path.append(robot_path_node(action, counter))
					orientation=1
				if(dx<0):
					if(orientation==1):
						action=18 #разворот на 180 градусов, добавить в switch для робота и проверить
						counter=0 #1
						robot_path.append(robot_path_node(action, counter))
					if(orientation==2):
						action=5
						counter=0 #1
						robot_path.append(robot_path_node(action, counter))
					if(orientation==4):
						action=6
						counter=0 #1
						robot_path.append(robot_path_node(action, counter))
					action=0
					counter=1
					robot_path.append(robot_path_node(action, counter))
					orientation=3	

			if(abs(dx)==1): #если робот едет вдоль ряда ячеек
				if(dx>0):
					if(orientation==1):
						action=5
						counter=0 #1
						robot_path.append(robot_path_node(action, counter))
					if(orientation==3):
						action=6
						counter=0 #1
						robot_path.append(robot_path_node(action, counter))
					if(orientation==4):
						action=18 #данная команда используется только на первой итерации построения маршрута, и разворот производится ДО начала движения
						counter=0 #1
						robot_path.append(robot_path_node(action, counter))
					action=0
					counter=1
					robot_path.append(robot_path_node(action, counter))
					orientation=2
				if(dx<0):
					if(orientation==1):
						action=6
						counter=0 #1
						robot_path.append(robot_path_node(action, counter))
					if(orientation==2): #данная команда используется только на первой итерации построения маршрута, и разворот производится ДО начала движения 
						action=18
						counter=0 #1
						robot_path.append(robot_path_node(action, counter))
					if(orientation==3):
						action=5
						counter=0 #1
						robot_path.append(robot_path_node(action, counter))
					action=0
					counter=1
					robot_path.append(robot_path_node(action, counter))
					#global orientation
					orientation=4
					#print("orientation k4 = ", orientation)
		#print("orientation k4 = ", orientation)
		
		orientation1=orientation #нужно для костыля в конце функции
		action=-1
		if ((mode==1)): #and(goal_mesh>=0)):
			if ((udalennost==0)and(orientation==2)):
				if(floor==1):
					action=1
				if(floor==2):
					action=2
				orientation=1
			if ((udalennost==1)and(orientation==2)):
				if(floor==1):
					action=3
				if(floor==2):
					action=4
				orientation=3
			if ((udalennost==0)and(orientation==4)):
				if(floor==1):
					action=3
				if(floor==2):
					action=4
				orientation=1
			if ((udalennost==1)and(orientation==4)):
				if(floor==1):
					action=1
				if(floor==2):
					action=2
				orientation=3
			robot_path.append(robot_path_node(action, 1)) 

		if ((mode==2)):#and(goal_mesh>=0)):
			if ((udalennost==0)and(orientation==2)):
				if(floor==1):
					action=3
				if(floor==2):
					action=4
				orientation=3
			if ((udalennost==1)and(orientation==2)):
				if(floor==1):
					action=1
				if(floor==2):
					action=2
				orientation=1
			if ((udalennost==0)and(orientation==4)):
				if(floor==1):
					action=1
				if(floor==2):
					action=2
				orientation=3
			if ((udalennost==1)and(orientation==4)):
				if(floor==1):
					action=3
				if(floor==2):
					action=4 
				orientation=1   #вот отсюда неверно определяет
			robot_path.append(robot_path_node(action, 1)) 
	if(to_end==True): 
		elem=robot_path[len(robot_path)-1]
		if(mode==2):
			if((elem.action==4)or(elem.action==3)): #ксли уже 5 или 6, то просто пройдет мимо
				robot_path[len(robot_path)-1].action=6
			if((elem.action==2)or(elem.action==1)):
				robot_path[len(robot_path)-1].action=5
		if(mode==1):  #где-то до этого неверно определяет 4 и 2 на последнем этапе (перед 0-м перекрестком). поэтому вот такой костыльы
			if ((elem.action==4)or(elem.action==3)): #ксли уже 5 или 6, то просто пройдет мимо
				robot_path[len(robot_path)-1].action=5
			if((elem.action==2)or(elem.action==1)):
				robot_path[len(robot_path)-1].action=6
				
	
	robot_action=[]
	sz=len(robot_path)
	i=0

	while(i<sz):
		if(robot_path[i].action>0):
			robot_action.append(robot_path[i])
		if(robot_path[i].action==0):
			count=0
			while (robot_path[i].action==0): #здесь выход за границу
				count=count+1
				i=i+1
			robot_action.append(robot_path_node(robot_path[i].action, count))
			i=i+1
		else:
			i=i+1
	
	sz=len(robot_action) #в А стар поступает вершина с номером -1, и возвращает действие = -1. но путь к базе это команда 0, поэтому меняем -1 на 0
	for i in range(0, sz):
		if(robot_action[i].action==-1):
			robot_action[i].action=0
			
	if(path[sz-1].number==0):#костыль, если конечная вершина 
		robot_path.append(robot_path_node(0, 1)) #может быть, вместо robot_path robot_action? 

	if ((start_mesh==-1)and(goal_mesh==-1)):
		if((robot_action[len(robot_action)-1].action==1)or(robot_action[len(robot_action)-1].action==2)or(robot_action[len(robot_action)-1].action==3)or(robot_action[len(robot_action)-1].action==4)):
			robot_action[len(robot_action)-1].action=0
			orientation = orientation1
	return(robot_action)


def get_path_nodes(path): #строит маршрут, состоящий из номеров неповторяющихся подряд перекрестков 
	sz=len(path)
	path_nodes=[]
	tmp=path[0]
	path_nodes.append(tmp)
	for i in range(1, sz):
		if(path[i]!=tmp):
			tmp=path[i]
			path_nodes.append(tmp)
	return(path_nodes)

def make_full_path(Nodes, start_node, start_mesh, mesh_arr, end_node, end_mesh, floor_arr, N_sizes, N_size, mode): #массив ячеек, номер стартового перекрестка, массив номеров ячеек с ящиками (1 или 2 элемента), номер конечного перекрестка, массив номеров этажей (1 или 2 элемента). Возвращает 
	#1, путь до первой ячейки
	node1=start_node #если робот стоит между перекрестками, то вводим тот перекресток, перед которым лежит препятствие(если его нельзя объехать), поэтому на объезд препятствий оставляем эту проблему
	mesh1=start_mesh
	mesh2=mesh_arr[0]
	
	node2=int(get_crossroad(int(mesh2), N_sizes, N_size, mode))

	if (mesh2==-1):
		node2=0
	path1 = A_star(Nodes, Nodes[node1], Nodes[node2], cost_between_blocks, cost_between_rows, cost_between_mesh, N_sizes, N_size) #было это выбрано
	
	nodes_sz=len(Nodes)
	for i in range(0, nodes_sz):
		Nodes[i].previous_node=-1
	action1=make_robot_action(path1, sum(N_sizes), N_size, floor_arr[0], mesh1, mesh2, mode, False)   #работает вот эта часть!
	for i in range(0, len(path1)): #mesh1 ????
		Nodes[path1[i].number].previous_node=-1
	path=path1
	action=[]
	action=action1

	#2, путь до второй ячейки или домой (в данном случае до второй ячейки)
	if (len(mesh_arr)==2):
		mesh1=mesh_arr[0]
		mesh2=mesh_arr[1]


		node1=int(get_crossroad(int(mesh1), N_sizes, N_size, mode))
		node2=int(get_crossroad(int(mesh2), N_sizes, N_size, mode))
		#print("Node1 = ", node1)
		#print("Node2 = ", node2)
	
		if (mesh1==-1):
			node1=0
		if (mesh2==-1):
			node2=0

		path2 = A_star(Nodes, Nodes[node1], Nodes[node2], cost_between_blocks, cost_between_rows, cost_between_mesh, N_sizes, N_size) 
		for i in range(0, nodes_sz):
			Nodes[i].previous_node=-1
		action2=make_robot_action(path2, sum(N_sizes), N_size, floor_arr[1], mesh1, mesh2, mode, False)   #работает вот эта часть!

		path=path+path2
		action=action+action2

	#3, путь домой
	if (len(mesh_arr)==2):
		mesh1=mesh_arr[1]
	else:
		mesh1=mesh_arr[0]
	mesh2=end_mesh
	node2=end_node

	node1=int(get_crossroad(int(mesh1), N_sizes, N_size, mode))
	node2=int(get_crossroad(int(mesh2), N_sizes, N_size, mode)) #убрать

	#этот блок все же нужен
	if (mesh1==-1):
		node1=0
	if (mesh2==-1):
		node2=0

	path3 = A_star(Nodes, Nodes[node1], Nodes[node2], cost_between_blocks, cost_between_rows, cost_between_mesh, N_sizes, N_size) #было это выбрано
	for i in range(0, nodes_sz):
		Nodes[i].previous_node=-1
	action3=make_robot_action(path3, sum(N_sizes), N_size, 1, mesh1, mesh2, mode, True)   #на конечном участке floor всегда должен быть равен 2, иначе не будет работать костыль, связанный с заменой 2/4 на 6/5

	path=path+path3
	action=action+action3
	
	list=[]
	list.append(len(action))
	list=list+action+path
	return(list) #list - список, состоит из robot_action и path




#!!!!
#еще одна проблема: знаем номер элемента маршрута, на котором все сломалось, но не знаем, на каком именно перекретке! решить эту проблему на Горьковском море возвращением еще и j, на котором все сломалось. зная это, можно вычислить перекресток, на котором произошла поломка. также на распберри хранить массив перекрестков (без повторений подряд!!!, т.е рядом не может быть 5, 5), через которые пройдет робот. и зная этот массив и j, найдем номер перекрестка, на котором все сломалось. СОЗДАТЬ СЕГОДНЯ функцию, которая построит такой маршрут 







mode = 2 #2 - новый склад
N_sizes=[1, 1]
#N_sizes=[300, 200, 200]
#N_sizes=[5, 5] #если больше, то ошибка:   499, in A_star, reachable.remove(node), ValueError: list.remove(x): x not in list
if(mode == 1):
	number_to_zero_node=N_sizes[0]+2
if(mode == 2):
	number_to_zero_node=N_sizes[0]+1
cost_between_blocks=1.5
cost_between_rows=4
cost_between_mesh=1
if(mode==1):
	N_size=sum(N_sizes)+len(N_sizes)+1
if(mode==2):
	N_size=sum(N_sizes) + len(N_sizes) - 1
#M=6
M=2
Nodes=generate_graf(N_sizes, M, cost_between_blocks, cost_between_rows, cost_between_mesh, number_to_zero_node, mode)
node1=1 #убрать!
node2=0 #убрать!

path = A_star(Nodes, Nodes[node1], Nodes[node2], cost_between_blocks, cost_between_rows, cost_between_mesh, N_sizes, N_size, mode, number_to_zero_node)
for i in range(0, len(path)):
	print(path[i].number)

sys.exit()



"""Nodes[5].number=-1
Nodes[6].number=-1
Nodes[7].number=-1
Nodes[8].number=-1"""

"""for i in range(0, len(Nodes)):   #печать вершин графа
	print("Number = ", Nodes[i].number)
	print("flag = ", Nodes[i].railroad)
	print("prev = ", Nodes[i].previous_node)
	sz=len(Nodes[i].branch_array)
	for j in range(0, sz):
		print("Branch = ", Nodes[i].branch_array[j].adjacted_node)
		print("Branch.cost = ", Nodes[i].branch_array[j].cost)

	print(" ")
"""
#в приложении сделать так, что в режиме 1 всегда будет один и тот же склад



#первый режим!
floor_arr=[2, 2]
start_node=0
start_mesh=-1 #автоматически этот расчет сделать (внутри функции или все-же нет???)
mesh_arr=[5000, 5500]
end_node=0
end_mesh=-1
t1=time.process_time()
list = make_full_path(Nodes, start_node, start_mesh, mesh_arr, end_node, end_mesh, floor_arr, N_sizes, N_size, mode)
t2=time.process_time()

#расшифровка списка list
action_size=list[0]
robot_action=[]
path=[]
for i in range(1, action_size+1):
	robot_action.append(list[i])
for i in range(action_size+1, len(list)):
	path.append(list[i])


#print("orientation = ", orientation)
#второй режим!
"""node1=27
node2=0
mesh1=-1
mesh2=-1
path = A_star(copy.deepcopy(Nodes), copy.copy(Nodes[node1]), copy.copy(Nodes[node2]), cost_between_blocks, cost_between_rows, cost_between_mesh, N_sizes, N_size) #было это выбрано
nodes_sz=len(Nodes)
for i in range(0, nodes_sz):
	Nodes[i].previous_node=-1

robot_action=make_robot_action(path, sum(N_sizes), N_size, 2, mesh1, mesh2, mode, False)   #работает вот эта часть!  
"""

path = get_path_nodes(path)  #не обязательно пользоваться последней вершиной. важно лишь, чтобы она была (если препятствие между 4 и 0, то 0-я вершина прогодится. ее не убирать!!!)
print("path ")
for i in range(0, len(path)):
	print("  ", path[i].number)
	print(" ")


print(" ")
print(" ")
print(" ")
print("robot action ")

for i in range(0, len(robot_action)):
	print("action = ", robot_action[i].action)
	print("count = ", robot_action[i].counter)
	print(" ")
print("orientation = ", orientation)
print("Time = ", t2-t1)
	

#A_star(Nodes, Nodes[4], Nodes[316], cost_between_blocks, cost_between_rows, cost_between_mesh, N_sizes, N_size)


# насчет нулевой вершины - А стар начинается с той вершины, которая после нулевой идет!!!!!!  эвристика для нулевой вершины не считается



