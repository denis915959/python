#   python graf_sklad2_function.txt
from tkinter import *

def box1():  
	print(' ')#lbl.configure(text="Я же просил 1...")
	#lbl.configure(text=str(k))
	#s = "Hello World"
	#text.insert(1.0, s)
	#s = text.get(1.0, END)
	#label['text'] = s

	
def box2():  
	print(k)#lbl.configure(text="Я же просил 1...")
	#lbl.configure(text=str(k))
	#s = "Hello World"
	#text.insert(1.0, s)
	#s = text.get(1.0, END)
	#label['text'] = s


class mesh_2D: #то, с чем мы работаем при создании склада
	def __init__(self, number, led_num, udalennost):
		self.number=number
		self.led_num=led_num
		self.udalennost=udalennost


def draw_sklad(window, sklad_2D, centr, M, n1, n2, first_is_line_of_mesh):
	N=n1+n2

	w_window = int(window.winfo_screenwidth()) -60 #  ? -60 с запасом 
	h_window = int(window.winfo_screenheight()) -40 #  ? -40 с запасом 
	print(w_window)
	print(h_window) 
	canvas = Canvas(height=840, width=1535, bg="white", highlightthickness=0)#создаем холст поверх текущего!
	canvas.place(x=0, y=0)
	button_array=[] #массив классов типа кнопка


	#ЭТАЛОНЫ
	h_button_standard=4 #высота кнопки в шрифтах, 3
	w_button_standard=8 #ширина ПОЛОВИНЫ кнопки в ШИРИНЕ шрифта, 8
	h_shift_standard=6 #отступ вверх в шрифтах
	w_shift_standard=7  #отступ в ШИРИНЕ шрифта
	convert=2.39
	bd_size_standard=6 #размер границы в пикселях


	x=0#переменные
	y=0#, так как сверху надпись высотой 40 пикселей


	j=0
	i=0
	k=0   #счетчик массива button_array
	sklad_count=0 #счетчик массива sklad
	h_sklad=(len(centr)-1)*h_shift_standard+h_button_standard*M +2*1 +1    
	w_sklad=int((N*w_button_standard*2+w_shift_standard)/convert) +2*1 +1    #невозможно конвертировать пиксели в размеры склада в высоте шрифта, так как мы не знаем конкретное значения шрифта. поэтому берем худший случай - bd_size в шрифтах = 1*2 h_font (так как шрифт < 6  не используется), +1 обеспечивает округление в большую сторону. Если будет выходить за границы поля - вместо 1*2+1 сделать 5. этого хватит точно!
	if (h_sklad<=w_sklad):

		tmp1=h_window/h_sklad-2
		tmp2=w_window/w_sklad-2
		print('tmp1=',tmp1)
		print('tmp2=',tmp2)
	
		h_font1=int(tmp1)  #?
		h_font2=int(tmp2)  #?
	
		print('h_font1=',h_font1)
		print('h_font2=',h_font2)

		if (h_font2>=h_font1):
			h_font=h_font1
		else:
			h_font=h_font2
	
		if (h_font>30):
			h_font=30
		print('h_font=', h_font)

		Font='Arial ' + str(h_font)
	
		bd_size=int((h_font/30)*bd_size_standard)
		print('bd_size', bd_size)

		h_sklad_pixels=h_font*h_sklad+2*M*bd_size              # 
		w_sklad_pixels=int(h_font*w_sklad)+2*N*bd_size          # изменить на масштабированную границу

		h_button_pixels=h_font*h_button_standard+2*bd_size                  # изменить на масштабированную границу
		w_button_pixels=int(h_font*w_button_standard/convert)+2*bd_size  # изменить на масштабированную границу
		h_shift_pixels=h_font*h_shift_standard  #в высотах шрифта
		w_shift_pixels=h_font*w_shift_standard  #в высотах шрифта 

		x_start=int((w_window-w_sklad_pixels)/2)    #выравнивание по центру
		y_start=h_window-int((h_window-h_sklad_pixels)/2)    #выравнивание по центру

		y=y_start

		for i in range (0, M):
			#y=y-h_button* ratio
			x=int(x_start/2) #  ??????
			print('x= ', x)
			udalennost=sklad_2D[sklad_count].udalennost  
			for j in range (0, n1):
				m=1

				string=str(sklad_count)+'.'+str(m)

				color='color'
				if (sklad_count%2==1):
					color='yellow'
				else:
					color='orange'
				button_array.append(Button(window,  bd=bd_size, text=string, font=Font, background=color, height = int(h_button_standard/2), width = int(w_button_standard/2), command=box1()))
				button_array[k].place(anchor= 'sw', x=x, y=y) #anchor sw - отсчет с левого нижнего угла
				print('width=', w_button_pixels)
				x=x+w_button_pixels 
				k=k+1
				m=2
				string=str(sklad_count)+'.'+str(m)
				button_array.append(Button(window, bd=bd_size,text=string, font=Font, background=color, height = int(h_button_standard/2), width = int(w_button_standard/2), command=box1()))
				button_array[k].place(anchor= 'sw', x=x, y=y) #anchor sw - отсчет с левого нижнего угла
				x=x+w_button_pixels             #??????????7
				print('x= ', x)
				k=k+1
				sklad_count=sklad_count+1
			x=x+w_shift_pixels
			j=0
			for j in range (0, n2):
				m=1
				string=str(sklad_count)+'.'+str(m)
				color='color'
				if (sklad_count%2==1):
					color='yellow'
				else:
					color='orange'
				button_array.append(Button(window, text=string, bd=bd_size,font=Font, background=color, height = int(h_button_standard/2), width = int(w_button_standard/2), command=box1()))
				button_array[k].place(anchor= 'sw', x=x, y=y)  #anchor sw - отсчет с левого нижнего угла
				x=x+w_button_pixels
				print('x= ', x)
				k=k+1
				m=2
				string=str(sklad_count)+'.'+str(m)
				button_array.append(Button(window, text=string,bd=bd_size, font=Font, background=color, height = int(h_button_standard/2), width = int(w_button_standard/2), command=box1()))
				button_array[k].place(anchor= 'sw', x=x, y=y)  #anchor sw - отсчет с левого нижнего угла
				x=x+w_button_pixels 
				print('x= ', x)
				k=k+1	
				sklad_count=sklad_count+1
			y=y-h_button_pixels	
			if (udalennost==True):
				y=y-h_shift_pixels #+
			print('end iteration : ', y)



	else:
		tmp1=h_window/w_sklad-4  #-2    h_sklad
		tmp2=w_window/h_sklad-4  #-2    w_sklad
		print('tmp1=',tmp1)
		print('tmp2=',tmp2)


		h_font1=int(tmp1)  #?
		h_font2=int(tmp2)  #?

		print('h_font1=',h_font1)
		print('h_font2=',h_font2)

		if (h_font2>=h_font1):
			h_font=h_font1
		else:
			h_font=h_font2
	
		if (h_font>30):
			h_font=30
		print('h_font=', h_font)

		Font='Arial ' + str(h_font)
	
		bd_size=int((h_font/30)*bd_size_standard)
		print('bd_size', bd_size)

		h_sklad_pixels=h_font*h_sklad+2*M*bd_size             # h_sklad
		w_sklad_pixels=int(h_font*w_sklad)+2*N*bd_size           # w_sklad

		h_button_pixels=h_font*h_button_standard+2*bd_size                  # изменить на масштабированную границу
		w_button_pixels=int(h_font*w_button_standard/convert)+2*bd_size  # /convert
		h_shift_pixels=h_font*h_shift_standard
		w_shift_pixels=h_font*w_shift_standard

		x_start=int((w_window-h_sklad_pixels)/2)    #выравнивание по центру
		y_start=h_window-int((h_window-w_sklad_pixels)/2)    #выравнивание по центру

		x=x_start

		for i in range (0, M):
			#y=y-h_button* ratio
			y=y_start #  ??????

			print('y= ', y)
			udalennost=sklad_2D[sklad_count].udalennost  
			for j in range (0, n1):
				m=1

				if (sklad_count<10):
					string=str(sklad_count)+'.'+str(m)+'  '
				else:
					string=str(sklad_count)+'.'+str(m)

				color='color'
				if (sklad_count%2==1):
					color='yellow'
				else:
					color='orange'
				button_array.append(Button(window,  bd=bd_size, text=string, font=Font, background=color,  height= int(w_button_standard/4), width = int(h_button_standard/(2*convert)), command=box1())) #/(2*2.39)      Я ПОМЕНЯЛ МЕСТАМИ h и w!!!!!!
				button_array[k].place(anchor= 'sw', x=x, y=y) #anchor sw - отсчет с левого нижнего угла
				print('width=', w_button_pixels)
				y=y-w_button_pixels 
				print('y= ', y)
				k=k+1
				m=2
				if (sklad_count<10):
					string=str(sklad_count)+'.'+str(m)+'  '
				else:
					string=str(sklad_count)+'.'+str(m)
				button_array.append(Button(window, bd=bd_size,text=string, font=Font, background=color, height= int(w_button_standard/4), width = int(h_button_standard/(2*convert)), command=box1()))
				button_array[k].place(anchor= 'sw', x=x, y=y) #anchor sw - отсчет с левого нижнего угла
				y=y-w_button_pixels             #??????????7
				print('y= ', y)
				k=k+1
				sklad_count=sklad_count+1
			y=y-w_shift_pixels
			j=0
			for j in range (0, n2):
				m=1
				if (sklad_count<10):
					string=str(sklad_count)+'.'+str(m)+'  '
				else:
					string=str(sklad_count)+'.'+str(m)
				color='color'
				if (sklad_count%2==1):
					color='yellow'
				else:
					color='orange'
				button_array.append(Button(window, text=string, bd=bd_size,font=Font, background=color, height= int(w_button_standard/4), width = int(h_button_standard/(2*convert)), command=box1()))
				button_array[k].place(anchor= 'sw', x=x, y=y)  #anchor sw - отсчет с левого нижнего угла
				y=y-w_button_pixels
				print('y= ', y)
				k=k+1
				m=2
				if (sklad_count<10):
					string=str(sklad_count)+'.'+str(m)+'  '
				else:
					string=str(sklad_count)+'.'+str(m)
				button_array.append(Button(window, text=string,bd=bd_size, font=Font, background=color, height= int(w_button_standard/4), width = int(h_button_standard/(2*convert)), command=box1()))
				button_array[k].place(anchor= 'sw', x=x, y=y)  #anchor sw - отсчет с левого нижнего угла
				y=y-w_button_pixels 
				print('y= ', y)
				k=k+1	
				sklad_count=sklad_count+1
			x=x+h_button_pixels	
			if (udalennost==True):
				x=x+h_shift_pixels #+
				#print('if: ', y)
			print('end iteration : ', y)


	window.mainloop()    #функция, которая ждет действий от пользователя (бесконечный цикл)


















window = Tk()

window.state('zoomed')#полноэкранный режим
#window.geometry('1535x840')#дляя полноэкранного режима не актуально?
window.resizable (False, False)#.title("Добро пожаловать в приложение PythonRu")
#lbl = Label(window, text="", font=("Arial Bold", 30))
M=4
n1=2
n2=4
N=n1+n2
number=-1
led_num=1
first_is_line_of_mesh=True
r=N*M
sklad_2D=[]
if (first_is_line_of_mesh==True):
	udalennost=True
else:
	udalennost=False

while ((number+1)<r):
	i=0
	for i in range(0, n1):
		number=number+1
		sklad_2D.append(mesh_2D(0, 0, False))
		sklad_2D[number].led_num=led_num
		sklad_2D[number].udalennost=udalennost
		sklad_2D[number].number=number
		led_num=led_num+1
	led_num=led_num+1
	i=0
	for i in range(0, n2):
		number=number+1
		sklad_2D.append(mesh_2D(0, 0, False))
		sklad_2D[number].led_num=led_num
		sklad_2D[number].udalennost=udalennost
		sklad_2D[number].number=number
		led_num=led_num+1
	if (udalennost==True):
		led_num=led_num-N-1
	udalennost=not(udalennost)

centr=[]#массив номеров центральных светодиодов
centr.append(0)
centr.append(n1+1)
j=2
while led_num>(centr[j-1]+N+1):
	centr.append(centr[j-1]+N+1)
	j=j+1
print(centr) #потом убрать




draw_sklad(window, sklad_2D, centr, M, n1, n2, first_is_line_of_mesh)

print('end')


#Place – это менеджер геометрии, который размещает виджеты, используя абсолютное позиционирование.
#Pack – это менеджер геометрии, который размещает виджеты по горизонтали и вертикали.
#Grid – это менеджер геометрии, который размещает виджеты в двухмерной сетке.



