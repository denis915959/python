# python otladka_graf.txt
# coding: cp1251

class Mesh:
	def __init__(self, m_number):
		self.number=m_number 

class Branch:
	def __init__(self, adjacted_node1, cost1):
		self.adjacted_node=adjacted_node1
		self.cost=cost1

class Node:
	def __init__(self, num, branch_arr, flag1):
		self.number=num
		self.branch_array=branch_arr
		self.railroad=flag1 #True - Перекресток, нет - рядом с ячейками находится
		self.traveled_path=0
		self.previous_node=-1

class robot_path_node:
	def __init__(self, action1, counter1):
		self.action=action1
		self.counter=counter1

def generate_graf(N_sizes, M, cost_between_blocks, cost_between_rows, cost_between_mesh, number_to_zero_node, mode):  #генерация графа, работает 
	Nodes=[]
	sz=len(N_sizes)
	count=0
	if(mode==1):  #число перекрестков в ряде стеллажей
		N_size=sum(N_sizes)+len(N_sizes) + 1 #число перекрестков в ряде стеллажей
		b=[]
		b.append(Branch(number_to_zero_node, cost_between_rows))
		Nodes.append(Node(count, b, True))

		for i in range(0, int(M/2)):
			#формируем левую магистраль!
			if(i==0):
				count=count+1
				branchs=[]
				if(i==(int(M/2)-1)):
					branchs=[Branch(count+1, cost_between_blocks)]
				else:
					branchs=[Branch(count+1, cost_between_blocks), Branch(count+N_size, cost_between_rows)]
				Nodes.append(Node(count, branchs, True))
			else:
				count=count+1
				branchs=[]
				if(i==(int(M/2)-1)):
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-N_size, cost_between_rows)]
				else:
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-N_size, cost_between_rows), Branch(count+N_size, cost_between_rows)]
				Nodes.append(Node(count, branchs, True))

			#формируем перекрестки в самом первом блоке.
			if(N_sizes[0]==1): #блок из одной ячейки!
				count=count+1
				branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks)] #добавлено
				Nodes.append(Node(count, branchs, False))
			else:
				for j in range(0, N_sizes[0]):
					count=count+1
					branchs=[]
					if(j==0): # первый перекресток в блоке
						branchs=[Branch(count+1, cost_between_mesh), Branch(count-1, cost_between_blocks)] #добавлено
					if(j==(N_sizes[0]-1)): # последний перекресток в блоке
						branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_blocks)]
					if((j!=(N_sizes[0]-1))and(j!=0)): # обычный перекресток в середине
						branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_mesh)]
					Nodes.append(Node(count, branchs, False))
			
			for k in range(1, sz): #идем по блокам
				#создаем перекресток на главной диагонали
				count=count+1
				flag=False
				if((i==0)and(int(M/2)==1)): #т.е если это испытательный стенд
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks)]
					flag=True
				if((i==0)and(int(M/2)>1)): #т.е если это НЕ испытательный стенд, первый ряд
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks), Branch(count+N_size, cost_between_rows)]
					flag=True
				if((i!=0)and(i==(int(M/2)-1))): #последний ряд
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks), Branch(count-N_size, cost_between_rows)]
					flag=True
				if(flag==False): #т.е это обычный перекресток в середине склада
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks), Branch(count-N_size, cost_between_rows), Branch(count+N_size, cost_between_rows)]
				Nodes.append(Node(count, branchs, True))

				# создаем сам блок
				for j in range(0, N_sizes[k]):
					count=count+1
					branchs=[]
					if(N_sizes[k]==1): #блок из одной ячейки!
						if(k==(sz-1)): # крайний правый блок!
							branchs=[Branch(count-1, cost_between_blocks), Branch(count+1, cost_between_blocks)]
						else:
							branchs=[Branch(count-1, cost_between_blocks), Branch(count+1, cost_between_blocks)]
					
					else: 
						flag = False
						if(j==0): # первый перекресток в блоке
							branchs=[Branch(count+1, cost_between_mesh), Branch(count-1, cost_between_blocks)] #эта строка отличается от аналогичной при построении крайнего левого блока
							flag = True
						if((j==(N_sizes[k]-1))and(j!=0)and(k==(sz-1))): # крайний перекресток справа
							branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_blocks)] #добавлено
							flag = True
						elif((j==(N_sizes[k]-1))and(j!=0)): #крайний перекресток в блоке, но не крайнем блоке!
							branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_blocks)]
							flag = True 
						if(flag==False):    #((j!=(N_sizes[0]-1))and(j!=0)): #обычный перекресток внутри блока
							branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_mesh)]
						#if((N_sizes[k]==1)and(k==(sz-1))):

					Nodes.append(Node(count, branchs, False))

			#формируем правую магистраль!
			if(i==0):
				count=count+1
				branchs=[]
				if(i==(int(M/2)-1)):
					branchs=[Branch(count-1, cost_between_blocks)]
				else:
					branchs=[Branch(count-1, cost_between_blocks), Branch(count+N_size, cost_between_rows)]
				Nodes.append(Node(count, branchs, True))
			else:
				count=count+1
				branchs=[]
				if(i==(int(M/2)-1)):
					branchs=[Branch(count-1, cost_between_blocks), Branch(count-N_size, cost_between_rows)]
				else:
					branchs=[Branch(count-1, cost_between_blocks), Branch(count-N_size, cost_between_rows), Branch(count+N_size, cost_between_rows)]
				Nodes.append(Node(count, branchs, True))

		Nodes[number_to_zero_node].branch_array.append(Branch(0, cost_between_rows))


	if (mode==2):
		N_size=sum(N_sizes)+len(N_sizes)-1 #число перекрестков в ряде стеллажей
		b=[]
		b.append(Branch(number_to_zero_node, cost_between_rows))
		Nodes.append(Node(count, b, True))

		for i in range(0, int(M/2)):
			#формируем перекрестки в самом первом блоке.
			if(N_sizes[0]==1):
				count=count+1
				branchs=[Branch(count+1, cost_between_blocks)]
				Nodes.append(Node(count, branchs, False))
			else:
				for j in range(0, N_sizes[0]):
					count=count+1
					branchs=[]
					if(j==0): # первый перекресток в блоке
						branchs=[Branch(count+1, cost_between_mesh)]
					if(j==(N_sizes[0]-1)): # последний перекресток в блоке
						branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_blocks)]
					if((j!=(N_sizes[0]-1))and(j!=0)):
						branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_mesh)]
					Nodes.append(Node(count, branchs, False))
			
			for k in range(1, sz): #идем по блокам
				#создаем перекресток на главной диагонали
				count=count+1
				flag=False
				if((i==0)and(int(M/2)==1)): #т.е если это испытательный стенд
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks)]
					flag=True
				if((i==0)and(int(M/2)>1)): #т.е если это НЕ испытательный стенд, первый ряд
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks), Branch(count+N_size, cost_between_rows)]
					flag=True
				if((i!=0)and(i==(int(M/2)-1))): #последний ряд
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks), Branch(count-N_size, cost_between_rows)]
					flag=True
				if(flag==False): #т.е это обычный перекресток в середине склада
					branchs=[Branch(count+1, cost_between_blocks), Branch(count-1, cost_between_blocks), Branch(count-N_size, cost_between_rows), Branch(count+N_size, cost_between_rows)]
				Nodes.append(Node(count, branchs, True))

				# создаем сам блок
				for j in range(0, N_sizes[k]):
					count=count+1
					branchs=[]
					if(N_sizes[k]==1):
						if(k==(sz-1)): 
							branchs=[Branch(count-1, cost_between_blocks)]
						else:
							branchs=[Branch(count-1, cost_between_blocks), Branch(count+1, cost_between_blocks)]
					
					else: 
						flag = False
						if(j==0): # первый перекресток в блоке
							branchs=[Branch(count+1, cost_between_mesh), Branch(count-1, cost_between_blocks)] #эта строка отличается от аналогичной при построении крайнего левого блока
							flag = True
						if((j==(N_sizes[k]-1))and(j!=0)and(k==(sz-1))): # крайний перекресток справа
							branchs=[Branch(count-1, cost_between_mesh)] #, Branch(count+1, cost_between_blocks)]
							flag = True
						elif((j==(N_sizes[k]-1))and(j!=0)): #крайний перекресток в блоке, но не крайнем блоке!
							branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_blocks)]
							flag = True 
						if(flag==False):    #((j!=(N_sizes[0]-1))and(j!=0)): #обычный перекресток внутри блока
							branchs=[Branch(count-1, cost_between_mesh), Branch(count+1, cost_between_mesh)]
						#if((N_sizes[k]==1)and(k==(sz-1))):

					Nodes.append(Node(count, branchs, False))

		Nodes[number_to_zero_node].branch_array.append(Branch(0, cost_between_rows))
	return(Nodes)




# функция выбора следующей вершины на основании расчета эвристики
def choose_node(reachable, goal_node, cost_between_blocks, cost_between_rows, cost_between_mesh, N_sizes, N_size, mode, number_to_zero_node): #goal_node это объект класса Node
	sz_reachable=len(reachable)
	H=[]
	if (mode == 1):
		for k in range(0, sz_reachable):  #расчет эвристики в цикле между goal_node и всемы элементами массива reachable
			node1_abs=reachable[k]   #первоначальное значение
			node2_abs=goal_node      #первоначальное значение

			heuristic=0
			node1 = node1_abs.number
			node2 = node2_abs.number

			if(node2==node1):
				heuristic = 0
				H.append(heuristic+reachable[k].traveled_path)
				continue
			if(node1==0):
				node1 = number_to_zero_node
				heuristic = heuristic + cost_between_rows
				print("h1 ", heuristic)
			else:
				node1=(node1_abs.number-1)%N_size+1

			if(node2==0):
				heuristic = 0
				H.append(heuristic+reachable[k].traveled_path)
				continue
			else:
				node2=(node2_abs.number-1)%N_size+1
	
			if ((node1_abs.number%N_size)>(node2_abs.number%N_size)):  #node1 левее node2 всегда!!!
				tmp=node1_abs
				node1_abs=node2_abs
				node2_abs=tmp
			if (node1>node2):  #node1 левее node2 всегда!!!
				tmp=node1
				node1=node2
				node2=tmp

			sz=len(N_sizes)
			Sum=1 
			for i in range(0, sz): #не N_size!!
				if(node1==Sum):
					flag1=True
					block_node1=i
					break
				Sum=Sum+N_sizes[i]+1
				if(node1<Sum): #<=
					block_node1=i
					break
			if((node1==1)and(node2!=N_size)):
				block_node1=-1 
				flag1=True
			if (node1==N_size):
				block_node1=sz
				flag1=True
			Sum=1
		
			for i in range(0, sz):
				if(node2==Sum):
					flag2=True
					block_node2=i
					break
				Sum=Sum+N_sizes[i] + 1
				if(node2<Sum):
					block_node2=i
					break
			if(node2==1):  #для n2 это не актуально, так как node2>=node1
				block_node2=-1  #т.е =-1
				flag2=True
			if (node2==N_size):
				block_node2=sz
				flag2=True
			if((node1==1)and(node2==N_size)):
				block_node1=-1

			if((block_node1==block_node2)and(block_node1!=sz)and(block_node1!=-1)and(node1_abs.railroad!=True)and(node2_abs.railroad!=True)):  # вместо 3 нужен len(N_sizes)?
				Sum=-1
				if(block_node1==0):
					Sum=2
				else:
					Sum=2 # 1
					for j in range(0, block_node1):
						Sum=Sum+N_sizes[j]+1
				h1=node1-Sum
				h2=node2-Sum
				S1=h1+h2
				print(Sum)
				print("h1 = ", h1)
				print("h2 = ", h2)

				Sum=-1
				if(block_node1==0):
					Sum=2
				else:
					Sum=0 # 1
					for j in range(0, (block_node1+1)):
						Sum=Sum+N_sizes[j]+1
				h1=abs(node1-Sum)
				h2=abs(node2-Sum)
				print("s = ", Sum)
				print("h1 = ", h1)
				print("h2 = ", h2)

				S2=h1+h2
				if(S1>S2):
					cross_count=S2
				else:
					cross_count=S1	
				heuristic =heuristic + cross_count*cost_between_mesh    # heuristic=(Min-2)*cost_between_mesh+2*cost_between_blocks
				#print("h1 = ", heuristic)
				print("cross_count = ", cross_count)
				if ((node1_abs.number//N_size)!=(node2_abs.number//N_size)): #важно, чтобы перекрестки были в одно блоке!
					heuristic=heuristic+2*cost_between_blocks
			else:
				for j in range(node1, node2):
					if ((Nodes[j].railroad==True)or(Nodes[j+1].railroad==True)):  #-1
						heuristic = heuristic + cost_between_blocks
					if ((Nodes[j].railroad==False) and (Nodes[j+1].railroad==False)):  #-1
						heuristic = heuristic + cost_between_mesh
	
			row_node1=int((node1_abs.number-1)/N_size)
			row_node2=int((node2_abs.number-1)/N_size)
			row_difference=abs(row_node2-row_node1) 
			heuristic=heuristic+row_difference*cost_between_rows  #вернуть!	
			H.append(heuristic+reachable[k].traveled_path)

	if (mode == 2):
		for k in range(0, sz_reachable):  #расчет эвристики в цикле между goal_node и всемы элементами массива reachable
			node1_abs=reachable[k]  #первоначальное значение
			node2_abs=goal_node     #первоначальное значение
		
			heuristic=0
			node1 = node1_abs.number
			node2 = node2_abs.number
			if(node2==node1):
				heuristic = 0
				H.append(heuristic+reachable[k].traveled_path)
				continue			

			if(node1==0):
				node1 = number_to_zero_node
				heuristic = heuristic + cost_between_rows
			else:
				node1=(node1_abs.number-1)%N_size+1

			if(node2==0):
				heuristic = 0
				H.append(heuristic+reachable[k].traveled_path)
				continue
			else:
				node2=(node2_abs.number-1)%N_size+1

			if ((node1_abs.number%N_size)>(node2_abs.number%N_size)):  #node1 левее node2 всегда!!!
				tmp=node1_abs
				node1_abs=node2_abs
				node2_abs=tmp
			if (node1>node2):  #node1 левее node2 всегда!!!
				tmp=node1
				node1=node2
				node2=tmp

			sz=len(N_sizes)
			#ищем номер блока ячеек, в котором находится первая вершина
			Sum=0
			block_node1=-2
			for i in range(0, sz): #не N_size!!
				if(node1==Sum):
					flag1=True
					block_node1=i
					break
				Sum=Sum+N_sizes[i]+1
				if(node1<Sum): #<=
					block_node1=i
					break
			Sum=0
			block_node2=-2
			for i in range(0, sz):
				if(node2==Sum):
					flag2=True
					block_node2=i
					break
				Sum=Sum+N_sizes[i] + 1
				if(node2<Sum):
					block_node2=i
					break

			if((block_node1==block_node2)and(node1_abs.railroad!=True)and(node2_abs.railroad!=True)): #т.е перекрестки в одном блоке находятся, ни один из них не на главной магистрпали!
				cross_count=-2
				if(block_node1==0): #переписано по новой, работает на всех типах складов!
					Sum=N_sizes[0]
					h1=Sum - node1  #расчет номера перекрестки в блоке, содержащем этот перекресток
					h2=Sum - node2
					cross_count=h1+h2 #это костыль, чтобы не делать еще одну проверку при расчете эвристики, так как первому блоку не принадлежит ни один перекресток!
					print("cross_count = ", cross_count) # убрать!!
					heuristic=cross_count*cost_between_mesh	
				if(block_node1==(sz-1)): #переписано по новой, работает на всех типах складов!
					Sum=1
					for j in range(0, block_node1): #здесь выход за диапазон!
						Sum=Sum+N_sizes[j]+1
					h1=abs(node1-Sum)
					h2=abs(node2-Sum)
					cross_count=h1+h2
					print("cross_count2 = ", cross_count) # убрать!!
					heuristic=cross_count*cost_between_mesh
				if((block_node1!=(sz-1))and(block_node1!=0)): 
					Sum=1
					for j in range(0, block_node1):
						Sum=Sum+N_sizes[j]+1
					h1=node1-Sum   #расчет номера перекрестки в блоке, содержащем этот перекресток
					h2=node2-Sum
					S1=h1+h2

					Sum=N_sizes[0]
					for j in range(1, (block_node1+1)): #здесь надо исправить!
						Sum=Sum+N_sizes[j]+1
					h1=abs(node1-Sum)
					h2=abs(node2-Sum)
					S2=h1+h2
					if(S1>S2):
						cross_count=S2
					else:
						cross_count=S1
					print("cross_count3 = ", cross_count) # убрать!!	
					heuristic=cross_count*cost_between_mesh  # +2*cost_between_blocks
				if ((node1_abs.number//N_size)!=(node2_abs.number//N_size)): #важно, чтобы перекрестки были в одно блоке!
					heuristic=heuristic+2*cost_between_blocks
			else:
				for j in range(node1, node2):
					if ((Nodes[j].railroad==True)or(Nodes[j+1].railroad==True)):  #-1
						heuristic = heuristic + cost_between_blocks
					if ((Nodes[j].railroad==False) and (Nodes[j+1].railroad==False)):  #-1
						heuristic = heuristic + cost_between_mesh

			row_node1=int((node1_abs.number-1)/N_size)
			row_node2=int((node2_abs.number-1)/N_size)
			row_difference=abs(row_node2-row_node1) 
			heuristic=heuristic+row_difference*cost_between_rows  #вернуть!
			H.append(heuristic+reachable[k].traveled_path)

	min=int(1000000*cost_between_mesh)
	for i in range(0, sz_reachable):
		if(H[i]<min):
			min=H[i]
	num=0
	for i in range(0, sz_reachable):
		if(H[i]==min):
			num=i
	print("heuristic = ", heuristic)
	return(reachable[num])


def check_node_on_reachable(reachable, node): #True - входит, False - не входит
	sz=len(reachable)
	flag=False
	for i in range(0, sz):
		if(reachable[i].number==node.number):
			flag=True
			break
	return(flag)



def make_path(Nodes, goal_node): #тут виснет при стартовой вершине не 0
	path=[]
	node=Nodes[goal_node.number]
	#print("A star")
	while (node.previous_node!=-1):
		path.append(node)
		node=Nodes[node.previous_node]
	path.append(node) #добавляем в маршрут стартовую вершину
	path.reverse()
	return(path)
	



def A_star(Nodes, start_node, goal_node, cost_between_blocks, cost_between_rows, cost_between_mesh, N_sizes, N_size, mode, number_to_zero_node):   #goal_node это объект класса Node
	reachable=[]
	explored=[]
	k=0
	reverse=False
	if(start_node.number==goal_node.number):
		path=[]
		path.append(Nodes[start_node.number])
		path.append(Nodes[goal_node.number])
		return(path)

	else:
		if(start_node.number>goal_node.number):
			tmp=start_node
			start_node=goal_node
			goal_node=tmp
			reverse=True

		if(start_node.number==0):
			node=Nodes[Nodes[0].branch_array[0].adjacted_node]
			Nodes[Nodes[0].branch_array[0].adjacted_node].previous_node=0 #на нулевую вершину указывает, но почему-то не работает
			sz=len(node.branch_array)
			for i in range(0, sz):
				reachable.append(Nodes[node.branch_array[i].adjacted_node])
			explored.append(Nodes[0])
			k=0
	
		if(start_node.number!=0): #тут возможно тоже что-то с нулевой вершиной сделать?
			sz=len(start_node.branch_array)
			for i in range(0, sz):
				reachable.append(Nodes[start_node.branch_array[i].adjacted_node])
			explored.append(Nodes[start_node.number])
			k=1
	
		while(len(reachable)>0): # сделать одну функцию choose_mode!
			node=Nodes[choose_node(reachable, goal_node, cost_between_blocks, cost_between_rows, cost_between_mesh, N_sizes, N_size, mode, number_to_zero_node).number]
			if(k==1):
				Nodes[node.number].previous_node=Nodes[start_node.number].number
				k=2

			if(node.number==goal_node.number):
				path=make_path(Nodes, goal_node)
				if(start_node.number==0):
					path.insert(0, Nodes[Nodes[0].branch_array[0].adjacted_node])
					path.insert(0, Nodes[0])

				if(reverse==True):
					path.reverse()
				return(path)

			reachable.remove(node)
			explored.append(node)

			adjacent_nodes=[]
			new_reachable_nodes=[] #этот массив не обновляется

			sz_adj_node=len(node.branch_array)
		
			for i in range(0, sz_adj_node):
				adjacent_nodes.append(Nodes[node.branch_array[i].adjacted_node])

			sz_explored=len(explored) #вот это переписать надо
			new_reachable_nodes=adjacent_nodes
			for i in range(0, sz_explored):
				for j in range(0, len(new_reachable_nodes)):  #sz_adj_node):
					if(new_reachable_nodes[j].number==explored[i].number): #reachable
						new_reachable_nodes.remove(explored[i]) #reachable
						break 

			sz_adj_node=len(new_reachable_nodes)
			for i in range(0, sz_adj_node): #проверить этот блок, удалить break, написать make_path, протестировать алгоритм
				if(check_node_on_reachable(reachable, new_reachable_nodes[i])==False): #т.е не знаем, как попасть в эту вершину 
					Nodes[new_reachable_nodes[i].number].previous_node=node.number
					reachable.append(Nodes[new_reachable_nodes[i].number])
			k=2	



"""mode = 1
N_sizes=[3, 2, 4]
M=6"""

"""mode=2
N_sizes=[5, 5]
M = 4"""

"""mode=2
N_sizes=[2, 1]
M = 2"""

"""mode=2
N_sizes=[3, 2, 1]
M = 4"""

"""mode=2
N_sizes=[1, 2, 3]
M = 4"""

"""mode=2
N_sizes=[3, 1, 2]
M = 4"""

"""mode=2
N_sizes=[1, 1]
M = 2"""

mode=2
N_sizes=[3, 2, 4, 2]
M = 4

"""mode=1
N_sizes=[3, 1, 2]
M = 4"""

"""mode=1
N_sizes=[1, 2, 3]
M = 4"""

"""mode=1
N_sizes=[3, 2, 1]
M = 4"""

"""mode=1
N_sizes=[2, 2, 2]
M = 6"""

"""mode=1
N_sizes=[1, 1]
M = 2"""

"""mode=1
N_sizes=[3, 2, 3, 2, 2]
M = 6"""

N_size = 0
if(mode == 1):
	number_to_zero_node=N_sizes[0]+2
	N_size = sum(N_sizes)+len(N_sizes)+1
if(mode == 2):
	number_to_zero_node=N_sizes[0]+1 
	N_size = sum(N_sizes)+len(N_sizes)-1

cost_between_blocks=1.5
cost_between_rows=4
cost_between_mesh=1



Nodes = generate_graf(N_sizes, M, cost_between_blocks, cost_between_rows, cost_between_mesh, number_to_zero_node, mode)
"""for i in range(0, len(Nodes)):   #печать вершин графа
	print("Number = ", Nodes[i].number)
	print("flag = ", Nodes[i].railroad)
	print("prev = ", Nodes[i].previous_node)
	sz=len(Nodes[i].branch_array)
	for j in range(0, sz):
		print("Branch = ", Nodes[i].branch_array[j].adjacted_node)
		print("Branch.cost = ", Nodes[i].branch_array[j].cost)

	print(" ")"""

start_node=Nodes[4] #2;4 цифру 2 не пишет
goal_node=Nodes[3]

# убрать!
reachable = [start_node]
choose_node(reachable, goal_node, cost_between_blocks, cost_between_rows, cost_between_mesh, N_sizes, N_size, mode, number_to_zero_node)

"""path = A_star(Nodes, start_node, goal_node, cost_between_blocks, cost_between_rows, cost_between_mesh, N_sizes, N_size, mode, number_to_zero_node)
for i in range(0, len(path)):
	print(path[i].number) """