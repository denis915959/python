# python test_mqtt2_class.txt
# Рабочая версия кода для Распберри!!!

import time
import random #generate id of client
from paho.mqtt import client as mqtt_client
from operator import length_hint

class robot_path_node:
	def __init__(self, action1, counter1):
		self.action=action1
		self.counter=counter1

class MQTT_RPi:
    def __init__(self):
        self.robot_action=[]
        self.array_is_received=False #массив robot_action принят целиком?
        self.broker = 'broker.emqx.io'
        self.port = 1883
        self.topic = "python/robot" #mqtt
        self.username = 'robot' # emqx
        self.password = 'public'
        self.client_id = f'python-mqtt-{random.randint(0, 100)}'
        self.connect_counter=0

    def connect_mqtt(self) -> mqtt_client:
        def on_connect(client, userdata, flags, rc):
            if rc == 0:
                print("Connected to MQTT Broker!")
                self.connect_counter=self.connect_counter+1
            else:
                #print("Failed to connect, return code %dn", rc)
                print("else")
        client = mqtt_client.Client(self.client_id)
        client.username_pw_set(self.username, self.password)
        client.on_connect = on_connect
        client.connect(self.broker, self.port)
        return client

    def on_message(self, client, userdata, msg):
        print("start on_message")
        action_tmp=0
        counter_tmp=0
        message=msg.payload.decode() #int(msg.payload.decode())
        print("k1")
        if((message[0]=="#")and(message[1]=="$")): #this is system messaage!
            print("err")
            return
        if((message[0]=="m")and(message[1]=="e")): #this is system messaage!
            print("err")
            return
        print("k2")
        message=str(message)
        len_message=len(message)
        if(len_message>2):
            print("clear")
            self.robot_action.clear()
            self.array_is_received = False
        i=0
        tmp=0
        print(f"Received `{message}` from `{msg.topic}` topic")
        while(message[i]!=","):
            tmp=tmp*10+int(message[i])
            i=i+1
        robot_action_sz=tmp
        i=i+1
        while(i < len_message):
            action_tmp=0
            while(message[i]!=","):
                action_tmp = action_tmp*10+int(message[i])
                i = i+1
            counter_tmp=0
            i = i+1
            while(message[i]!=","):
                counter_tmp = counter_tmp*10+int(message[i])
                i = i+1
            self.robot_action.append(robot_path_node(action_tmp, counter_tmp))
            i = i+1
        if(len(self.robot_action)==robot_action_sz): # Ни на что не влияет, вернуться, когда сделаю класс
            print("if")
            self.array_is_received=True

    def mqtt_communication(self): # может вызываться неограничеенное чсло раз self. не добавлены
        print("before connect")
        client = self.connect_mqtt()
        print("after connect")
        client.loop_start()
        print("after loop start")
        client.subscribe(self.topic)
        print("before while")
        while(self.array_is_received==False): # Ожидание подключения? FALSE в уонце сделать!
            client.on_message=self.on_message
            if(self.connect_counter==2):
                print("return")
                return(False)
            #print("in while") #при выводе на экран почему-то бесконечный цикл
        print("after while")
    
        client.loop_stop()
        print("after loop stop")
        client = self.connect_mqtt()
        print("after connect mqtt")
        client.loop_start()
        res = client.publish(self.topic, "-2") #прием прошел успешно, уведомляем об этом склад
        if(res[0]==0):
            print("Success send!")
        else:
            print("Not successfully send!")
        for i in range(0, len(robot_action)):
            print(robot_action[i].action, "  ", robot_action[i].counter)
        
        #вместо этого блока должна быть функция robot_trip
        print(" ") #robot go!
        time.sleep(2)
        print("robot is work!")
    
        # n2 - количество усчпешно взятых товаров на момент отправки сообщения, n3==1 - препятствие слева, n4==1 - препятствие справа!!
        result_trip=[1, -1, -1, -1, -1]   #   #номер элементов в path! 
        #result_trip=[0, 2, 3, -1, -1, 3, 4] # if 6

        #result_trip=[0, 2, 3, -1, -1]
        #result_trip=[0, 1, 2, -1, -1]

        #result_trip=[0, -1, 0, 1, 0]
        #result_trip=[1, 0, 1, -1, -1, 1, 2]
        # результат поездки робота
        #пробел в конце обязателен, иначе распарсер на складе не будет работать!
        answer=""
        for i in range(0, len(result_trip)):
            answer = answer + str(result_trip[i])+" "
        client.publish(self.topic, answer) # 1 - робот успешно взял товар, 0 - встретил препятствие, которое робот не может объехать
        time.sleep(0.4)
        if(res[0]==0):
            print("Success send!")
        else:
            print("Not successfully send!")
        client.publish(self.topic, answer) 
        time.sleep(0.4)
        client.publish(self.topic, answer)
        print(answer)
    
        
    
        #возвращаем значения переменных в исходное состояние (для повторного вызова функции mqtt_communication)
        self.robot_action.clear()
        self.array_is_received=False
        client.loop_stop()
        return(True)
        
        
        
        
        
        
robot_action=[]
action_tmp=-1           #принятое значение поля action, которое еще не добавлено в robot_action
counter_tmp=-1          #принятое значение поля counter, которое еще не добавлено в robot_action
recv_counter=0          #счетчик приятых сообщений при приеме массива robot_action
start_recv=False        #прием массива robot_action начался?
actions_size=-1         #размер массива robot_action
array_is_received=False #массив robot_action принят целиком?


    
    
for i in range(0, 1):
    mqtt=MQTT_RPi()
    flag=mqtt.mqtt_communication()
    mqtt=None
    while(flag==False):
        time.sleep(1.5)
        print("while =False")
        """mqtt=MQTT_RPi()
        flag=mqtt.mqtt_communication()
        mqtt=None"""
        mqtt1=MQTT_RPi()
        flag=mqtt1.mqtt_communication()
        mqtt1=None


