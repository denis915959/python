# python lab2.txt

import numpy as np

input_tensor = np.random.rand(5, 5, 2) # входной тензор 

# вывод сгенерированного тензора
print("Input Tensor:")
print(input_tensor)

# Создание фильтров рандомайзером
filter1 = [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 1], [2, 3]], [[4, 5], [6, 7], [8, 9]]]
filter2 = [[[11, 12], [13, 14], [15, 16]], [[17, 18], [19, 11], [12, 13]], [[14, 15], [16, 17], [18, 19]]]
filter3 = [[[21, 22], [23, 24], [25, 26]], [[27, 28], [29, 21], [22, 23]], [[24, 25], [26, 27], [28, 29]]]
filters = []
filters.append(filter1) # = [filter1, filter2, filter3]
filters.append(filter2)
filters.append(filter3)

# применение сверточного слоя
stride = 3
output_height = (input_tensor.shape[0] - 3) // stride + 1
output_width = (input_tensor.shape[1] - 3) // stride + 1
output_depth = len(filters)
output_tensor = np.zeros((output_height, output_width, output_depth))
for f, filter in enumerate(filters):
    for i in range(0, input_tensor.shape[0] - 2, stride):
        for j in range(0, input_tensor.shape[1] - 2, stride):
            output_tensor[i//stride, j//stride, f] = np.sum(input_tensor[i:i+3, j:j+3, :] * filter)

# вывод результата
print("\nOutput Tensor:")
print(output_tensor)










"""import numpy as np
# Создание двухканального тензора размером 5x5x2 (высота x ширина x количество каналов)
input_tensor = np.random.rand(5, 5, 2)
# Создание фильтров размером 3x3x2x3 (высота x ширина x количество входных каналов x количество выходных каналов)
filters = np.random.rand(3, 3, 2, 3)
# Шаг свертки
stride = 3
# Размеры выходного тензора
output_height = (input_tensor.shape[0] - filters.shape[0]) // stride + 1
output_width = (input_tensor.shape[1] - filters.shape[1]) // stride + 1
output_channels = filters.shape[3]
# Создание выходного тензора
output_tensor = np.zeros((output_height, output_width, output_channels))

# Применение сверточного слоя
for i in range(output_height):
    for j in range(output_width):
        for k in range(output_channels):
            output_tensor[i, j, k] = np.sum(input_tensor[i*stride:i*stride+3, j*stride:j*stride+3, :] * filters[:, :, :, k])

# Вывод результата
print(output_tensor)"""